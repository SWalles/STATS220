knitr::opts_chunk$set(echo = TRUE, message = FALSE, warnig = FALSE, error = FALSE)
library(tidyverse)
library(ggwordcloud)
# Read in the data
learning_data <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSRQQO-vbQ5MTxptDnxvM2lm94UeZt2JqBEtiw_hC0RL1ys8P1WMNdxdl4up__bGN-jfW-kh3DbTZ8D/pub?gid=363618696&single=true&output=csv")
# Rename the variables
learning_data <- learning_data %>%
rename(
date = 1,
age = 2,
interests = 3,
personality = 4,
sm_hours = 5,
platforms = 6,
sm_type = 7,
rating = 8,
sentiment = 9
)
# Create Histogram
learning_data %>%
ggplot(mapping = aes(x = age)) +
geom_histogram(binwidth = 15, fill = "steelblue1", colour = "black") +
labs(title = "Histogram of age distribution of participants",
x = "Ages",
y = "Count")
# Dynamic statement
paste("The oldest person is", max(learning_data$age),
"years old and the youngest person is",
min(learning_data$age), "years old. The mean age of participants is approximately",
round(mean(learning_data$age)), "years.")
# Seperate and clean data
interests <- str_split(learning_data$interests, ", ") %>%
unlist()
interests <- interests[!(interests == "eg. Camping" |
interests == "Hiking" |
interests == "Fishing" |
interests == "etc.")]
# Make a bar chart
interests %>%
as_tibble() %>%
ggplot() +
geom_bar(aes(y = interests), fill = "steelblue1") +
labs(title = "Bar Chart of Participant Interest",
y = "Interests",
x = "Counts")
# Classify and relabel data
learning_data <- learning_data %>%
mutate(personality = factor(personality,
levels = c("Doing something fun",
"Partaking in a creative activity",
"Learning something new"),
labels = c("Playful", "Creative", "Academic")))
# Plot a bar chart
learning_data %>%
ggplot() +
geom_bar(aes(y = personality), fill = "steelblue1") +
labs(title = "Bar Chart of Personality Types",
y = "Personaility Type",
x = "Counts")
# Create histogram
learning_data %>%
ggplot(mapping = aes(x = sm_hours)) +
geom_histogram(binwidth = 10, fill = "steelblue1", colour = "black") +
labs(title = "Histogram of Hours Spent on Social Media in a Week",
x = "Social Media Hours",
y = "Count")
# Dynamic statement
paste("The most time spent on social media in a week is",
max(learning_data$sm_hours),
"hours and the least is",
min(learning_data$sm_hours),
"hours. The mean time spent on social media in a week is approximately",
trunc(mean(learning_data$sm_hours)),
"hours and",
round(mean(learning_data$sm_hours)%%1 * 60),
"minutes.")
#Platforms
# Seperate multiple choices by one participant
platforms <- str_split(learning_data$platforms, ", ") %>%
unlist()
# Create bar chart
platforms %>%
as_tibble() %>%
ggplot() +
geom_bar(aes(y = platforms), fill = "steelblue1") +
labs(title = "Bar Plot of Platform Use by Participants",
y = "Social Media Platform",
x = "count")
# Social Media Type
# Remove the examples using code learned in STATS 380
learning_data <- learning_data %>%
mutate(sm_type = sub(" \\(eg.+\\)$", "", sm_type))
# Craete bar chart
learning_data %>%
ggplot() +
geom_bar(aes(y = sm_type), fill = "steelblue1") +
labs(title = "Favourite Social Media Types",
y = "Social Media Type",
x = "Count")
# Ratings
#Create a bar chart
learning_data %>%
ggplot() +
geom_bar(aes(x = rating), fill = "steelblue1") +
labs(title = "General Feelings Toward Social Media",
x = "Score out of 5",
y = "Count")
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = sentiment, colour = sentiment_count)) +
geom_text_wordcloud() +
theme_minimal()
update.packages("tidyverse")
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = sentiment, colour = sentiment_count)) +
geom_text_wordcloud() +
theme_minimal()
library(xfun)
detach("package:xfun", unload = TRUE)
remove.packages("xfun")
install.packages("xfun")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warnig = FALSE, error = FALSE)
library(tidyverse)
library(ggwordcloud)
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = sentiment, colour = sentiment_count)) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = sentiment, colour = sentiment_count, size = sentiment_count)) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = sentiment, colour = sentiment_count, size = 100 * log(sentiment_count))) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = sentiment, colour = sentiment_count, size = sentiment_count/sum(sentiment_count))) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = unqique(sentiment), colour = sentiment_count, size = sentiment_count/sum(sentiment_count))) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
ggplot(aes(label = unique(sentiment), colour = sentiment_count, size = sentiment_count/sum(sentiment_count))) +
geom_text_wordcloud() +
theme_minimal()
View(learning_data)
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n(),
prop = count / sum(count)) %>%
ggplot(aes(label = sentiment, colour = count, size = prop)) +
geom_text_wordcloud() +
theme_minimal()
learning_data %>%
group_by(sentiment) %>%
summarise(count = n(),
prop = count / sum(count))
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = count / sum(count))) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = sqrt(count / sum(count)))) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = 2 * count / sum(count))) +
geom_text_wordcloud() +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = count / sum(count))) +
geom_text_wordcloud() +
theme_minimal()
# Dynamic statement
cat("The oldest person is", max(learning_data$age),
"years old and the youngest person is",
min(learning_data$age), "years old. The mean age of participants is approximately",
round(mean(learning_data$age)), "years.")
# Classify and relabel data
learning_data <- learning_data %>%
mutate(personality = factor(personality,
levels = c("Doing something fun",
"Partaking in a creative activity",
"Learning something new"),
labels = c("Playful", "Creative", "Academic")))
# Plot a bar chart
learning_data %>%
ggplot() +
geom_bar(aes(y = personality), fill = "steelblue1") +
labs(title = "Bar Chart of Personality Types",
y = "Personaility Type",
x = "Counts")
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = count / sum(count))) +
geom_text_wordcloud() +
scale_size_area(max_size = 30) +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = count / sum(count))) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
# Sentiment
# Manipulate data to create a word chart using ggwordcloud
learning_data <- learning_data %>%
mutate(sentiment = tolower(sentiment),
sentiment_count = as.numeric(table(sentiment)[sentiment]))
# Plot a word cloud
learning_data %>%
group_by(sentiment) %>%
summarise(count = n()) %>%
ggplot(aes(label = sentiment, colour = count, size = count / sum(count))) +
geom_text_wordcloud() +
scale_size_area(max_size = 15) +
theme_minimal()
